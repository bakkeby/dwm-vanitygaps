From ae84a2065b88eae1ffe175b8694e9c00f92d280e Mon Sep 17 00:00:00 2001
From: bakkeby <bakkeby@gmail.com>
Date: Tue, 3 Sep 2019 23:09:09 +0200
Subject: Adding pertag, cfacts, vanitygaps, grid and centered flextile patches

---

diff --git a/config.def.h b/config.def.h
index 1c0b587..92b07c5 100644
--- a/config.def.h
+++ b/config.def.h
@@ -3,6 +3,11 @@
 /* appearance */
 static const unsigned int borderpx  = 1;        /* border pixel of windows */
 static const unsigned int snap      = 32;       /* snap pixel */
+static const unsigned int gappih    = 20;       /* horiz inner gap between windows */
+static const unsigned int gappiv    = 10;       /* vert inner gap between windows */
+static const unsigned int gappoh    = 10;       /* horiz outer gap between windows and screen edge */
+static const unsigned int gappov    = 30;       /* vert outer gap between windows and screen edge */
+static       int smartgaps          = 0;        /* 1 means no outer gap when there is only one window */
 static const int showbar            = 1;        /* 0 means no bar */
 static const int topbar             = 1;        /* 0 means bottom bar */
 static const char *fonts[]          = { "monospace:size=10" };
@@ -36,11 +41,18 @@ static const float mfact     = 0.55; /* factor of master area size [0.05..0.95]
 static const int nmaster     = 1;    /* number of clients in master area */
 static const int resizehints = 1;    /* 1 means respect size hints in tiled resizals */

+#include "vanitygaps.h"
+
+static const int layoutaxis[] = {
+	SPLIT_VERTICAL,   /* layout axis: 1 = x, 2 = y; negative values mirror the layout, setting the master area to the right / bottom instead of left / top */
+	TOP_TO_BOTTOM,    /* master axis: 1 = x (from left to right), 2 = y (from top to bottom), 3 = z (monocle) */
+	TOP_TO_BOTTOM,    /* stack axis:  1 = x (from left to right), 2 = y (from top to bottom), 3 = z (monocle) */
+};
+
 static const Layout layouts[] = {
 	/* symbol     arrange function */
-	{ "[]=",      tile },    /* first entry is default */
-	{ "><>",      NULL },    /* no layout function means floating behavior */
-	{ "[M]",      monocle },
+	{ "[]=",      flextile }, /* first entry is default */
+	{ "><>",      NULL },     /* no layout function means floating behavior */
 };

 /* key definitions */
@@ -70,12 +82,36 @@ static Key keys[] = {
 	{ MODKEY,                       XK_d,      incnmaster,     {.i = -1 } },
 	{ MODKEY,                       XK_h,      setmfact,       {.f = -0.05} },
 	{ MODKEY,                       XK_l,      setmfact,       {.f = +0.05} },
+	{ MODKEY|ShiftMask,             XK_h,      setcfact,       {.f = +0.25} },
+	{ MODKEY|ShiftMask,             XK_l,      setcfact,       {.f = -0.25} },
+	{ MODKEY|ShiftMask,             XK_o,      setcfact,       {.f =  0.00} },
 	{ MODKEY,                       XK_Return, zoom,           {0} },
+	{ MODKEY|Mod4Mask,              XK_u,      incrgaps,       {.i = +1 } },
+	{ MODKEY|Mod4Mask|ShiftMask,    XK_u,      incrgaps,       {.i = -1 } },
+	{ MODKEY|Mod4Mask,              XK_i,      incrigaps,      {.i = +1 } },
+	{ MODKEY|Mod4Mask|ShiftMask,    XK_i,      incrigaps,      {.i = -1 } },
+	{ MODKEY|Mod4Mask,              XK_o,      incrogaps,      {.i = +1 } },
+	{ MODKEY|Mod4Mask|ShiftMask,    XK_o,      incrogaps,      {.i = -1 } },
+	{ MODKEY|Mod4Mask,              XK_6,      incrihgaps,     {.i = +1 } },
+	{ MODKEY|Mod4Mask|ShiftMask,    XK_6,      incrihgaps,     {.i = -1 } },
+	{ MODKEY|Mod4Mask,              XK_7,      incrivgaps,     {.i = +1 } },
+	{ MODKEY|Mod4Mask|ShiftMask,    XK_7,      incrivgaps,     {.i = -1 } },
+	{ MODKEY|Mod4Mask,              XK_8,      incrohgaps,     {.i = +1 } },
+	{ MODKEY|Mod4Mask|ShiftMask,    XK_8,      incrohgaps,     {.i = -1 } },
+	{ MODKEY|Mod4Mask,              XK_9,      incrovgaps,     {.i = +1 } },
+	{ MODKEY|Mod4Mask|ShiftMask,    XK_9,      incrovgaps,     {.i = -1 } },
+	{ MODKEY|Mod4Mask,              XK_0,      togglegaps,     {0} },
+	{ MODKEY|Mod4Mask|ShiftMask,    XK_0,      defaultgaps,    {0} },
 	{ MODKEY,                       XK_Tab,    view,           {0} },
 	{ MODKEY|ShiftMask,             XK_c,      killclient,     {0} },
-	{ MODKEY,                       XK_t,      setlayout,      {.v = &layouts[0]} },
+	{ MODKEY,                       XK_t,      setflexlayout,  {.i = 261 } }, // default tile
 	{ MODKEY,                       XK_f,      setlayout,      {.v = &layouts[1]} },
-	{ MODKEY,                       XK_m,      setlayout,      {.v = &layouts[2]} },
+	{ MODKEY,                       XK_m,      setflexlayout,  {.i =   6 } }, // monocle
+	{ MODKEY|ControlMask,           XK_w,      setflexlayout,  {.i = 262 } }, // deck layout
+	{ MODKEY|ControlMask,           XK_e,      setflexlayout,  {.i = 272 } }, // bstack layout
+	{ MODKEY|ControlMask,           XK_r,      setflexlayout,  {.i = 273 } }, // bstackhoriz layout
+	{ MODKEY|ControlMask,           XK_f,      setflexlayout,  {.i =   7 } }, // grid
+	{ MODKEY|ControlMask,           XK_g,      setflexlayout,  {.i = 293 } }, // centered master
 	{ MODKEY,                       XK_space,  setlayout,      {0} },
 	{ MODKEY|ShiftMask,             XK_space,  togglefloating, {0} },
 	{ MODKEY,                       XK_0,      view,           {.ui = ~0 } },
@@ -94,6 +130,10 @@ static Key keys[] = {
 	TAGKEYS(                        XK_8,                      7)
 	TAGKEYS(                        XK_9,                      8)
 	{ MODKEY|ShiftMask,             XK_q,      quit,           {0} },
+	{ MODKEY|ControlMask,           XK_t,      rotatelayoutaxis, {.i = 0} },    /* flextile, 0 = layout axis */
+	{ MODKEY|ControlMask,           XK_Tab,    rotatelayoutaxis, {.i = 1} },    /* flextile, 1 = master axis */
+	{ MODKEY|ControlMask|ShiftMask, XK_Tab,    rotatelayoutaxis, {.i = 2} },    /* flextile, 2 = stack axis */
+	{ MODKEY|ControlMask,           XK_Return, mirrorlayout,     {0} },         /* flextile, flip master and stack areas */
 };

 /* button definitions */
diff --git a/dwm.c b/dwm.c
index 4465af1..0ec8f50 100644
--- a/dwm.c
+++ b/dwm.c
@@ -87,6 +87,7 @@ typedef struct Client Client;
 struct Client {
 	char name[256];
 	float mina, maxa;
+	float cfact;
 	int x, y, w, h;
 	int oldx, oldy, oldw, oldh;
 	int basew, baseh, incw, inch, maxw, maxh, minw, minh;
@@ -111,14 +112,22 @@ typedef struct {
 	void (*arrange)(Monitor *);
 } Layout;

+typedef struct Pertag Pertag;
 struct Monitor {
 	char ltsymbol[16];
 	float mfact;
+	int ltaxis[3];
 	int nmaster;
 	int num;
+	int curtag;
+	int prevtag;
 	int by;               /* bar geometry */
 	int mx, my, mw, mh;   /* screen size */
 	int wx, wy, ww, wh;   /* window area  */
+	int gappih;           /* horizontal gap between windows */
+	int gappiv;           /* vertical gap between windows */
+	int gappoh;           /* horizontal outer gaps */
+	int gappov;           /* vertical outer gaps */
 	unsigned int seltags;
 	unsigned int sellt;
 	unsigned int tagset[2];
@@ -130,6 +139,7 @@ struct Monitor {
 	Monitor *next;
 	Window barwin;
 	const Layout *lt[2];
+	Pertag *pertag;
 };

 typedef struct {
@@ -180,7 +190,6 @@ static void killclient(const Arg *arg);
 static void manage(Window w, XWindowAttributes *wa);
 static void mappingnotify(XEvent *e);
 static void maprequest(XEvent *e);
-static void monocle(Monitor *m);
 static void motionnotify(XEvent *e);
 static void movemouse(const Arg *arg);
 static Client *nexttiled(Client *c);
@@ -208,7 +217,6 @@ static void sigchld(int unused);
 static void spawn(const Arg *arg);
 static void tag(const Arg *arg);
 static void tagmon(const Arg *arg);
-static void tile(Monitor *);
 static void togglebar(const Arg *arg);
 static void togglefloating(const Arg *arg);
 static void toggletag(const Arg *arg);
@@ -271,6 +279,19 @@ static Window root, wmcheckwin;
 /* configuration, allows nested code to access above variables */
 #include "config.h"

+struct Pertag {
+	unsigned int curtag, prevtag; /* current and previous tag */
+	int nmasters[LENGTH(tags) + 1]; /* number of windows in master area */
+	int ltaxes[LENGTH(tags) + 1][3];
+	float mfacts[LENGTH(tags) + 1]; /* mfacts per tag */
+	unsigned int sellts[LENGTH(tags) + 1]; /* selected layouts */
+	const Layout *ltidxs[LENGTH(tags) + 1][2]; /* matrix of tags and layouts indexes  */
+	Bool showbars[LENGTH(tags) + 1]; /* display bar for the current tag */
+	Client *prevzooms[LENGTH(tags) + 1]; /* store zoom information */
+};
+
+#include "vanitygaps.c"
+
 /* compile-time check if all tags fit into an unsigned int bit array. */
 struct NumTags { char limitexceeded[LENGTH(tags) > 31 ? -1 : 1]; };

@@ -631,6 +652,7 @@ Monitor *
 createmon(void)
 {
 	Monitor *m;
+	int i;

 	m = ecalloc(1, sizeof(Monitor));
 	m->tagset[0] = m->tagset[1] = 1;
@@ -638,9 +660,45 @@ createmon(void)
 	m->nmaster = nmaster;
 	m->showbar = showbar;
 	m->topbar = topbar;
+	m->gappih = gappih;
+	m->gappiv = gappiv;
+	m->gappoh = gappoh;
+	m->gappov = gappov;
 	m->lt[0] = &layouts[0];
 	m->lt[1] = &layouts[1 % LENGTH(layouts)];
 	strncpy(m->ltsymbol, layouts[0].symbol, sizeof m->ltsymbol);
+	m->ltaxis[0] = layoutaxis[0];
+	m->ltaxis[1] = layoutaxis[1];
+	m->ltaxis[2] = layoutaxis[2];
+	/* init tags, bars, layouts, axes, nmaster and mfacts */
+	m->curtag = m->prevtag = 1;
+
+	if (!(m->pertag = (Pertag *)calloc(1, sizeof(Pertag))))
+		die("fatal: could not malloc() %u bytes\n", sizeof(Pertag));
+	m->pertag->curtag = m->pertag->prevtag = 1;
+	for (i=0; i <= LENGTH(tags); i++) {
+		/* init nmaster */
+		m->pertag->nmasters[i] = m->nmaster;
+
+		/* init mfacts */
+		m->pertag->mfacts[i] = m->mfact;
+
+		/* init layouts */
+		m->pertag->ltidxs[i][0] = m->lt[0];
+		m->pertag->ltidxs[i][1] = m->lt[1];
+		m->pertag->sellts[i] = m->sellt;
+
+		/* init flextile axes */
+		m->pertag->ltaxes[i][0] = m->ltaxis[0];
+		m->pertag->ltaxes[i][1] = m->ltaxis[1];
+		m->pertag->ltaxes[i][2] = m->ltaxis[2];
+
+		/* init showbar */
+		m->pertag->showbars[i] = m->showbar;
+
+		/* swap focus and zoomswap*/
+		m->pertag->prevzooms[i] = NULL;
+	}
 	return m;
 }

@@ -966,7 +1024,7 @@ grabkeys(void)
 void
 incnmaster(const Arg *arg)
 {
-	selmon->nmaster = MAX(selmon->nmaster + arg->i, 0);
+	selmon->nmaster = selmon->pertag->nmasters[selmon->pertag->curtag] = MAX(selmon->nmaster + arg->i, 0);
 	arrange(selmon);
 }

@@ -1029,6 +1087,7 @@ manage(Window w, XWindowAttributes *wa)
 	c->w = c->oldw = wa->width;
 	c->h = c->oldh = wa->height;
 	c->oldbw = wa->border_width;
+	c->cfact = 1.0;

 	updatetitle(c);
 	if (XGetTransientForHint(dpy, w, &trans) && (t = wintoclient(trans))) {
@@ -1100,21 +1159,6 @@ maprequest(XEvent *e)
 		manage(ev->window, &wa);
 }

-void
-monocle(Monitor *m)
-{
-	unsigned int n = 0;
-	Client *c;
-
-	for (c = m->clients; c; c = c->next)
-		if (ISVISIBLE(c))
-			n++;
-	if (n > 0) /* override layout symbol */
-		snprintf(m->ltsymbol, sizeof m->ltsymbol, "[%d]", n);
-	for (c = nexttiled(m->clients); c; c = nexttiled(c->next))
-		resize(c, m->wx, m->wy, m->ww - 2 * c->bw, m->wh - 2 * c->bw, 0);
-}
-
 void
 motionnotify(XEvent *e)
 {
@@ -1500,10 +1544,13 @@ setfullscreen(Client *c, int fullscreen)
 void
 setlayout(const Arg *arg)
 {
-	if (!arg || !arg->v || arg->v != selmon->lt[selmon->sellt])
-		selmon->sellt ^= 1;
+	if (!arg || !arg->v || arg->v != selmon->lt[selmon->sellt]) {
+		selmon->pertag->sellts[selmon->pertag->curtag] ^= 1;
+		selmon->sellt = selmon->pertag->sellts[selmon->pertag->curtag];
+	}
 	if (arg && arg->v)
-		selmon->lt[selmon->sellt] = (Layout *)arg->v;
+		selmon->pertag->ltidxs[selmon->pertag->curtag][selmon->sellt] = (Layout *)arg->v;
+	selmon->lt[selmon->sellt] = selmon->pertag->ltidxs[selmon->pertag->curtag][selmon->sellt];
 	strncpy(selmon->ltsymbol, selmon->lt[selmon->sellt]->symbol, sizeof selmon->ltsymbol);
 	if (selmon->sel)
 		arrange(selmon);
@@ -1522,7 +1569,7 @@ setmfact(const Arg *arg)
 	f = arg->f < 1.0 ? arg->f + selmon->mfact : arg->f - 1.0;
 	if (f < 0.1 || f > 0.9)
 		return;
-	selmon->mfact = f;
+	selmon->mfact = selmon->pertag->mfacts[selmon->pertag->curtag] = f;
 	arrange(selmon);
 }

@@ -1670,36 +1717,10 @@ tagmon(const Arg *arg)
 	sendmon(selmon->sel, dirtomon(arg->i));
 }

-void
-tile(Monitor *m)
-{
-	unsigned int i, n, h, mw, my, ty;
-	Client *c;
-
-	for (n = 0, c = nexttiled(m->clients); c; c = nexttiled(c->next), n++);
-	if (n == 0)
-		return;
-
-	if (n > m->nmaster)
-		mw = m->nmaster ? m->ww * m->mfact : 0;
-	else
-		mw = m->ww;
-	for (i = my = ty = 0, c = nexttiled(m->clients); c; c = nexttiled(c->next), i++)
-		if (i < m->nmaster) {
-			h = (m->wh - my) / (MIN(n, m->nmaster) - i);
-			resize(c, m->wx, m->wy + my, mw - (2*c->bw), h - (2*c->bw), 0);
-			my += HEIGHT(c);
-		} else {
-			h = (m->wh - ty) / (n - i);
-			resize(c, m->wx + mw, m->wy + ty, m->ww - mw - (2*c->bw), h - (2*c->bw), 0);
-			ty += HEIGHT(c);
-		}
-}
-
 void
 togglebar(const Arg *arg)
 {
-	selmon->showbar = !selmon->showbar;
+	selmon->showbar = selmon->pertag->showbars[selmon->pertag->curtag] = !selmon->showbar;
 	updatebarpos(selmon);
 	XMoveResizeWindow(dpy, selmon->barwin, selmon->wx, selmon->by, selmon->ww, bh);
 	arrange(selmon);
@@ -1738,9 +1759,29 @@ void
 toggleview(const Arg *arg)
 {
 	unsigned int newtagset = selmon->tagset[selmon->seltags] ^ (arg->ui & TAGMASK);
+	int i;

 	if (newtagset) {
+		if (newtagset == ~0) {
+			selmon->pertag->prevtag = selmon->pertag->curtag;
+			selmon->pertag->curtag = 0;
+		}
+		/* test if the user did not select the same tag */
+		if (!(newtagset & 1 << (selmon->pertag->curtag - 1))) {
+			selmon->pertag->prevtag = selmon->pertag->curtag;
+			for (i=0; !(newtagset & 1 << i); i++) ;
+			selmon->pertag->curtag = i + 1;
+		}
 		selmon->tagset[selmon->seltags] = newtagset;
+
+		/* apply settings for this view */
+		selmon->nmaster = selmon->pertag->nmasters[selmon->pertag->curtag];
+		selmon->mfact = selmon->pertag->mfacts[selmon->pertag->curtag];
+		selmon->sellt = selmon->pertag->sellts[selmon->pertag->curtag];
+		selmon->lt[selmon->sellt] = selmon->pertag->ltidxs[selmon->pertag->curtag][selmon->sellt];
+		selmon->lt[selmon->sellt^1] = selmon->pertag->ltidxs[selmon->pertag->curtag][selmon->sellt^1];
+		if (selmon->showbar != selmon->pertag->showbars[selmon->pertag->curtag])
+			togglebar(NULL);
 		focus(NULL);
 		arrange(selmon);
 	}
@@ -2035,11 +2076,36 @@ updatewmhints(Client *c)
 void
 view(const Arg *arg)
 {
+	int i;
+	unsigned int tmptag;
+
 	if ((arg->ui & TAGMASK) == selmon->tagset[selmon->seltags])
 		return;
 	selmon->seltags ^= 1; /* toggle sel tagset */
-	if (arg->ui & TAGMASK)
+	if (arg->ui & TAGMASK) {
+		selmon->pertag->prevtag = selmon->pertag->curtag;
 		selmon->tagset[selmon->seltags] = arg->ui & TAGMASK;
+		if (arg->ui == ~0)
+			selmon->pertag->curtag = 0;
+		else {
+			for (i=0; !(arg->ui & 1 << i); i++) ;
+			selmon->pertag->curtag = i + 1;
+		}
+	} else {
+		tmptag = selmon->pertag->prevtag;
+		selmon->pertag->prevtag = selmon->pertag->curtag;
+		selmon->pertag->curtag = tmptag;
+	}
+	selmon->nmaster = selmon->pertag->nmasters[selmon->pertag->curtag];
+	selmon->mfact = selmon->pertag->mfacts[selmon->pertag->curtag];
+	selmon->sellt = selmon->pertag->sellts[selmon->pertag->curtag];
+	selmon->lt[selmon->sellt] = selmon->pertag->ltidxs[selmon->pertag->curtag][selmon->sellt];
+	selmon->lt[selmon->sellt^1] = selmon->pertag->ltidxs[selmon->pertag->curtag][selmon->sellt^1];
+	selmon->ltaxis[0] = selmon->pertag->ltaxes[selmon->pertag->curtag][0];
+	selmon->ltaxis[1] = selmon->pertag->ltaxes[selmon->pertag->curtag][1];
+	selmon->ltaxis[2] = selmon->pertag->ltaxes[selmon->pertag->curtag][2];
+	if (selmon->showbar != selmon->pertag->showbars[selmon->pertag->curtag])
+		togglebar(NULL);
 	focus(NULL);
 	arrange(selmon);
 }
diff --git a/vanitygaps.c b/vanitygaps.c
new file mode 100644
index 0000000..86fe308
--- /dev/null
+++ b/vanitygaps.c
@@ -0,0 +1,488 @@
+static void
+setgaps(int oh, int ov, int ih, int iv)
+{
+	if (oh < 0) oh = 0;
+	if (ov < 0) ov = 0;
+	if (ih < 0) ih = 0;
+	if (iv < 0) iv = 0;
+
+	selmon->gappoh = oh;
+	selmon->gappov = ov;
+	selmon->gappih = ih;
+	selmon->gappiv = iv;
+	arrange(selmon);
+}
+
+static void
+togglegaps(const Arg *arg)
+{
+	enablegaps = !enablegaps;
+	arrange(NULL);
+}
+
+static void
+defaultgaps(const Arg *arg)
+{
+	setgaps(gappoh, gappov, gappih, gappiv);
+}
+
+static void
+incrgaps(const Arg *arg)
+{
+	setgaps(
+		selmon->gappoh + arg->i,
+		selmon->gappov + arg->i,
+		selmon->gappih + arg->i,
+		selmon->gappiv + arg->i
+	);
+}
+
+static void
+incrigaps(const Arg *arg)
+{
+	setgaps(
+		selmon->gappoh,
+		selmon->gappov,
+		selmon->gappih + arg->i,
+		selmon->gappiv + arg->i
+	);
+}
+
+static void
+incrogaps(const Arg *arg)
+{
+	setgaps(
+		selmon->gappoh + arg->i,
+		selmon->gappov + arg->i,
+		selmon->gappih,
+		selmon->gappiv
+	);
+}
+
+static void
+incrohgaps(const Arg *arg)
+{
+	setgaps(
+		selmon->gappoh + arg->i,
+		selmon->gappov,
+		selmon->gappih,
+		selmon->gappiv
+	);
+}
+
+static void
+incrovgaps(const Arg *arg)
+{
+	setgaps(
+		selmon->gappoh,
+		selmon->gappov + arg->i,
+		selmon->gappih,
+		selmon->gappiv
+	);
+}
+
+static void
+incrihgaps(const Arg *arg)
+{
+	setgaps(
+		selmon->gappoh,
+		selmon->gappov,
+		selmon->gappih + arg->i,
+		selmon->gappiv
+	);
+}
+
+static void
+incrivgaps(const Arg *arg)
+{
+	setgaps(
+		selmon->gappoh,
+		selmon->gappov,
+		selmon->gappih,
+		selmon->gappiv + arg->i
+	);
+}
+
+static void
+getgaps(Monitor *m, int *oh, int *ov, int *ih, int *iv, unsigned int *nc, float *mf, float *sf)
+{
+	unsigned int n, oe = enablegaps, ie = enablegaps;
+	float mfacts = 0, sfacts = 0;
+	Client *c;
+
+	for (n = 0, c = nexttiled(m->clients); c; c = nexttiled(c->next), n++) {
+		if (m->nmaster && n < m->nmaster)
+			mfacts += c->cfact;
+		else
+			sfacts += c->cfact;
+	}
+	if (smartgaps && n == 1) {
+		oe = 0; // outer gaps disabled when only one client
+	}
+
+	*oh = m->gappoh*oe; // outer horizontal gap
+	*ov = m->gappov*oe; // outer vertical gap
+	*ih = m->gappih*ie; // inner horizontal gap
+	*iv = m->gappiv*ie; // inner vertical gap
+	*nc = n;            // number of clients
+	*mf = mfacts;       // total factor of master area
+	*sf = sfacts;       // total factor of stack area
+}
+
+/* Mirror layout axis for flextile */
+void
+mirrorlayout(const Arg *arg) {
+	if (!selmon->lt[selmon->sellt]->arrange)
+		return;
+	selmon->ltaxis[0] *= -1;
+	selmon->pertag->ltaxes[selmon->pertag->curtag][0] = selmon->ltaxis[0];
+	arrange(selmon);
+}
+
+/* Rotate layout axis for flextile */
+void
+rotatelayoutaxis(const Arg *arg) {
+	if (!selmon->lt[selmon->sellt]->arrange)
+		return;
+	if (arg->i == 0) {
+		if (selmon->ltaxis[0] > 0)
+			selmon->ltaxis[0] = selmon->ltaxis[0] + 1 > 4 ? 1 : selmon->ltaxis[0] + 1;
+		else
+			selmon->ltaxis[0] = selmon->ltaxis[0] - 1 < -4 ? -1 : selmon->ltaxis[0] - 1;
+	} else
+		selmon->ltaxis[arg->i] = selmon->ltaxis[arg->i] + 1 > 4 ? 1 : selmon->ltaxis[arg->i] + 1;
+	selmon->pertag->ltaxes[selmon->pertag->curtag][arg->i] = selmon->ltaxis[arg->i];
+	arrange(selmon);
+}
+
+/*
+ * Set predefined flextile layout.
+ *
+ * The arg int value is a binary representation of the setup where certain bits have different
+ * meanings, similar to how Linux permissions work.
+ *
+ * The first two bits represents the stack axis, bits 3 and 4 the master axis. Bits 5 and 6
+ * are used to control the layout while bit 7 indicates whether or not the layout is mirrored.
+ * The 8th bit is reserved while bit 9 through 12 control nmaster with up to 15 clients in the
+ * master stack.
+ *
+ * Bitwise layout:
+ *
+ *    0000          (nmaster: 0-15 = clients in master stack)
+ *        0         (reserved)
+ *         0        (orientation: 0 = normal, 1 = mirror)
+ *          00      (layout: 00 = vertical, 01 = horizontal, 10 = centered (vert), 11 = centered (horz))
+ *            00    (master axis: 00 = left to right, 01 = top to bottom, 10 = monocle, 11 = grid)
+ *              00  (stack axis:  00 = left to right, 01 = top to bottom, 10 = monocle, 11 = grid)
+ *
+ * Examples:
+ *    binary         int  layout
+ *    --------------------------
+ *    000000000110     6  monocle
+ *    000100000110   262  deck layout
+ *    000100010000   272  bstack layout
+ *    000100010001   273  bstackhoriz layout
+ *    000000000111     7  grid layout
+ *    000100000101   261  default tile layout
+ *    000100100101   293  centered master
+ *    000100000111   263  default tile layout with grid stack
+ */
+void
+setflexlayout(const Arg *arg)
+{
+	int i;
+
+	/* Find flextile layout */
+	for (i = 0; i < LENGTH(layouts); i++)
+		if (layouts[i].arrange == flextile)
+			break;
+
+	selmon->nmaster = ((arg->i & 0x0F00) >> 8);
+	selmon->ltaxis[0] = (1 + ((arg->i & 0x30) >> 4)) * (arg->i & 0x40 ? -1 : 1);
+	selmon->ltaxis[1] = 1 + ((arg->i & 0xC) >> 2);
+	selmon->ltaxis[2] = 1 + (arg->i & 0x3);
+
+	selmon->pertag->nmasters[selmon->pertag->curtag] = selmon->nmaster;
+	selmon->pertag->ltaxes[selmon->pertag->curtag][0] = selmon->ltaxis[0];
+	selmon->pertag->ltaxes[selmon->pertag->curtag][1] = selmon->ltaxis[1];
+	selmon->pertag->ltaxes[selmon->pertag->curtag][2] = selmon->ltaxis[2];
+
+	setlayout(&((Arg) { .v = &layouts[i] }));
+}
+
+void
+setcfact(const Arg *arg) {
+	float f;
+	Client *c;
+
+	c = selmon->sel;
+
+	if(!arg || !c || !selmon->lt[selmon->sellt]->arrange)
+		return;
+	f = arg->f + c->cfact;
+	if(arg->f == 0.0)
+		f = 1.0;
+	else if(f < 0.25 || f > 4.0)
+		return;
+	c->cfact = f;
+	arrange(selmon);
+}
+
+/* Flextile layout + gaps + cfacts + grid
+ * https://dwm.suckless.org/patches/flextile/
+ */
+static void
+flextile(Monitor *m) {
+	unsigned int i, n, nc = 0, sc = 0, lt, cn = 0, rn = 0, cc = 0; // counters
+	int cols = 1, rows = 1;
+	int x, y, h, w;     // master x, y, height, width
+	int sx, sy, sh, sw; // stack x, y, height, width
+	int ox, oy;         // other stack x, y (centered layout)
+	int oh, ov, ih, iv; // gaps outer/inner horizontal/vertical
+
+	float facts, sfacts, ofacts;
+	Client *c;
+
+	getgaps(m, &oh, &ov, &ih, &iv, &n, &facts, &sfacts);
+	setflexsymbols(m, n);
+
+	if (n == 0)
+		return;
+
+	/* No outer gap if full screen monocle */
+	if ((!m->nmaster && m->ltaxis[STACK] == MONOCLE) || (n <= m->nmaster && m->ltaxis[MASTER] == MONOCLE)) {
+		ox = sx = x = m->wx;
+		oy = sy = y = m->wy;
+		sh = h = m->wh;
+		sw = w = m->ww;
+	} else {
+		ox = sx = x = m->wx + ov;
+		oy = sy = y = m->wy + oh;
+		sh = h = m->wh - 2*oh;
+		sw = w = m->ww - 2*ov;
+	}
+	ofacts = sfacts;
+	sc = n - m->nmaster;
+
+
+	/* Split master into master + stack if we have enough clients */
+	if (m->nmaster && n > m->nmaster) {
+		if (abs(m->ltaxis[LAYOUT]) == SPLIT_VERTICAL
+				|| (abs(m->ltaxis[LAYOUT]) == SPLIT_CENTERED_V && n == m->nmaster + 1)) {
+			sw = (w - iv) * (1 - m->mfact);
+			w = (w - iv) * m->mfact;
+			if (m->ltaxis[LAYOUT] < 0) // mirror
+				x = sx + sw + iv;
+			else
+				sx = x + w + iv;
+		} else if (abs(m->ltaxis[LAYOUT]) == SPLIT_HORIZONTAL
+				|| (abs(m->ltaxis[LAYOUT]) == SPLIT_CENTERED_H && n == m->nmaster + 1)) {
+			sh = (h - ih) * (1 - m->mfact);
+			h = (h - ih) * m->mfact;
+			if (m->ltaxis[LAYOUT] < 0) // mirror
+				y = sy + sh + ih;
+			else
+				sy = y + h + ih;
+		} else if (abs(m->ltaxis[LAYOUT]) == SPLIT_CENTERED_V) {
+			sw = (w - 2*iv) * (1 - m->mfact) / 2;
+			w = (w - 2*iv) * m->mfact;
+			x = sx + sw + iv;
+			if (m->ltaxis[LAYOUT] < 0) // mirror
+				ox = x + w + iv;
+			else
+				sx = x + w + iv;
+		} else if (abs(m->ltaxis[LAYOUT]) == SPLIT_CENTERED_H) {
+			sh = (h - 2*ih) * (1 - m->mfact) / 2;
+			h = (h - 2*ih) * m->mfact;
+			y = sy + sh + ih;
+			if (m->ltaxis[LAYOUT] < 0) // mirror
+				oy = y + h + ih;
+			else
+				sy = y + h + ih;
+		}
+
+		if (abs(m->ltaxis[LAYOUT]) == SPLIT_CENTERED_V || abs(m->ltaxis[LAYOUT]) == SPLIT_CENTERED_H) {
+			sc = (n - m->nmaster) / 2 + ((n - m->nmaster) % 2 > 0 ? 1 : 0);
+			facts = sfacts = ofacts = 0;
+			for (i = 0, c = nexttiled(m->clients); c; c = nexttiled(c->next), i++) {
+				if (i < m->nmaster)
+					facts += c->cfact; // total factor of master area
+				else if (sc && i < m->nmaster + sc)
+					sfacts += c->cfact; // total factor of first stack area
+				else
+					ofacts += c->cfact; // total factor of second stack area
+			}
+		}
+	}
+
+	for (i = 0, lt = MASTER, c = nexttiled(m->clients); c; c = nexttiled(c->next), i++) {
+		if (i == 0 || (m->nmaster && i == m->nmaster) || i == (m->nmaster + sc)) {
+			nc = MIN(n, m->nmaster);
+			if (!m->nmaster || i == m->nmaster) { // switch to stack area
+				x = sx, y = sy, h = sh, w = sw, facts = sfacts, lt = STACK;
+				nc = sc;
+			} else if (i > 0 && i == (m->nmaster + sc)) { // switch to second stack area
+				x = ox, y = oy, h = sh, w = sw, nc = n - i, facts = ofacts;
+			}
+
+			if (m->ltaxis[lt] == LEFT_TO_RIGHT)
+				w -= iv * (nc - 1);
+			else if (m->ltaxis[lt] == TOP_TO_BOTTOM)
+				h -= ih * (nc - 1);
+			else if (m->ltaxis[lt] == GRID) {
+				/* grid dimensions */
+				for (cols = 1; cols <= nc/2; cols++)
+					if (cols*cols >= nc)
+						break;
+				if (nc == 5) /* set layout against the general calculation: not 1:2:2, but 2:3 */
+					cols = 2;
+				rows = nc/cols;
+				cn = rn = cc = 0; // reset cell no, row no, client count
+			}
+		}
+
+		if (m->ltaxis[lt] == LEFT_TO_RIGHT) {
+			resize(c, x, y, w * (c->cfact / facts) - (2*c->bw), h - (2*c->bw), 0);
+			x = x + WIDTH(c) + iv;
+		} else if (m->ltaxis[lt] == TOP_TO_BOTTOM) {
+			resize(c, x, y, w - (2*c->bw), h * (c->cfact / facts) - (2*c->bw), 0);
+			y = y + HEIGHT(c) + ih;
+		} else if (m->ltaxis[lt] == MONOCLE) {
+			resize(c, x, y, w - (2*c->bw), h - (2*c->bw), 0);
+		} else if (m->ltaxis[lt] == GRID) {
+			if (cc/rows + 1 > cols - nc%cols)
+				rows = nc/cols + 1;
+			resize(c,
+				x + cn*((w - iv*(cols - 1)) / cols + iv),
+				y + rn*((h - ih*(rows - 1)) / rows + ih),
+				(w - iv*(cols - 1)) / cols,
+				(h - ih*(rows - 1)) / rows,
+				0);
+			rn++;
+			cc++;
+			if (rn >= rows) {
+				rn = 0;
+				cn++;
+			}
+		}
+	}
+}
+
+static void
+setflexsymbols(Monitor *m, unsigned int n) {
+	char sym1 = 61, sym2 = 93, sym3 = 61, sym = 0;
+
+	/* Predefined layouts */
+	/* bstack */
+	if (abs(m->ltaxis[LAYOUT]) == SPLIT_HORIZONTAL && m->ltaxis[MASTER] == LEFT_TO_RIGHT && m->ltaxis[STACK] == LEFT_TO_RIGHT) {
+		snprintf(m->ltsymbol, sizeof m->ltsymbol, (m->ltaxis[LAYOUT] < 0 ? "⚍⚍⚍" : "⚎⚎⚎"));
+		return;
+	}
+
+	/* bstackhoriz */
+	if (abs(m->ltaxis[LAYOUT]) == SPLIT_HORIZONTAL && m->ltaxis[MASTER] == LEFT_TO_RIGHT && m->ltaxis[STACK] == TOP_TO_BOTTOM) {
+		snprintf(m->ltsymbol, sizeof m->ltsymbol, (m->ltaxis[LAYOUT] < 0 ? "☳☳☳" : "☶☶☶"));
+		return;
+	}
+
+	/* centered master horizontal split */
+	if (abs(m->ltaxis[LAYOUT]) == SPLIT_CENTERED_H && m->ltaxis[MASTER] == TOP_TO_BOTTOM && m->ltaxis[STACK] == TOP_TO_BOTTOM) {
+		snprintf(m->ltsymbol, sizeof m->ltsymbol, "☰☰☰");
+		return;
+	}
+
+	if (abs(m->ltaxis[LAYOUT]) == SPLIT_CENTERED_H && m->ltaxis[MASTER] == LEFT_TO_RIGHT && m->ltaxis[STACK] == LEFT_TO_RIGHT) {
+		snprintf(m->ltsymbol, sizeof m->ltsymbol, "☵☵☵");
+		return;
+	}
+
+	/* monocle */
+	if (n <= 1 && ((!m->nmaster && m->ltaxis[STACK] == MONOCLE) || (n <= m->nmaster && m->ltaxis[MASTER] == MONOCLE))) {
+		snprintf(m->ltsymbol, sizeof m->ltsymbol, "[M]");
+		return;
+	}
+
+	/* Layout symbols */
+	if (abs(m->ltaxis[LAYOUT]) == SPLIT_VERTICAL) {
+		if (m->nmaster > 1 || m->ltaxis[MASTER] == MONOCLE)
+			sym2 = 124; // |
+		else if (m->ltaxis[LAYOUT] < 0)
+			sym2 = 91; // [
+		else
+			sym2 = 93; // ]
+	} else if (abs(m->ltaxis[LAYOUT]) == SPLIT_HORIZONTAL) {
+		if (m->nmaster > 1 || m->ltaxis[MASTER] == MONOCLE)
+			sym2 = 58; // :
+		else if (m->ltaxis[LAYOUT] < 0)
+			sym2 = 91; // [
+		else
+			sym2 = 93; // ]
+	} else if (abs(m->ltaxis[LAYOUT]) == SPLIT_CENTERED_V) {
+		if (m->ltaxis[LAYOUT] < 0)
+			sym2 = 87; // W
+		else
+			sym2 = 77; // M
+	} else if (abs(m->ltaxis[LAYOUT]) == SPLIT_CENTERED_H) {
+		if (m->ltaxis[LAYOUT] < 0)
+			sym2 = 87; // W
+		else
+			sym2 = 77; // M
+	}
+
+	if (m->ltaxis[MASTER] == LEFT_TO_RIGHT)
+		sym1 = 124; // | ⏸
+	else if (m->ltaxis[MASTER] == TOP_TO_BOTTOM)
+		sym1 = 61; // =
+	else if (m->ltaxis[MASTER] == MONOCLE)
+		sym1 = MIN(n, m->nmaster);
+	else if (m->ltaxis[MASTER] == GRID)
+		sym1 = 35; // #
+
+	if (m->ltaxis[STACK] == LEFT_TO_RIGHT)
+		sym3 = 124; // |
+	else if (m->ltaxis[STACK] == TOP_TO_BOTTOM)
+		sym3 = 61; // =
+	else if (m->ltaxis[STACK] == MONOCLE)
+		sym3 = n - m->nmaster;
+	else if (m->ltaxis[STACK] == GRID)
+		sym3 = 35; // #
+
+
+	/* Generic symbols */
+	if (!m->nmaster) {
+		if (m->ltaxis[STACK] == MONOCLE) {
+			snprintf(m->ltsymbol, sizeof m->ltsymbol, "%c%d%c", 91, sym3, 93);
+		} else {
+			snprintf(m->ltsymbol, sizeof m->ltsymbol, "%c%c%c", sym3, sym3, sym3);
+		}
+		return;
+	}
+
+	if (n <= m->nmaster) {
+		if (m->ltaxis[MASTER] == MONOCLE) {
+			snprintf(m->ltsymbol, sizeof m->ltsymbol, "%c%d%c", 91, sym1, 93);
+		} else {
+			snprintf(m->ltsymbol, sizeof m->ltsymbol, "%c%c%c", 91, sym1, 93);
+		}
+	} else {
+		if (m->ltaxis[LAYOUT] < 0) {
+			sym = sym1;
+			sym1 = sym3;
+			sym3 = sym;
+		}
+		if (m->nmaster == 1 && abs(m->ltaxis[LAYOUT]) <= SPLIT_HORIZONTAL && m->ltaxis[MASTER] != MONOCLE) {
+			if (m->ltaxis[LAYOUT] > 0)
+				sym1 = 91;
+			else
+				sym3 = 93;
+		}
+		if (m->ltaxis[MASTER] == MONOCLE && m->ltaxis[STACK] == MONOCLE)
+			snprintf(m->ltsymbol, sizeof m->ltsymbol, "%d%c%d", sym1, sym2, sym3);
+		else if ((m->nmaster && m->ltaxis[MASTER] == MONOCLE && m->ltaxis[LAYOUT] > 0) || (m->ltaxis[STACK] == MONOCLE && m->ltaxis[LAYOUT] < 0))
+			snprintf(m->ltsymbol, sizeof m->ltsymbol, "%d%c%c", sym1, sym2, sym3);
+		else if ((m->ltaxis[STACK] == MONOCLE && m->ltaxis[LAYOUT] > 0) || (m->nmaster && m->ltaxis[MASTER] == MONOCLE && m->ltaxis[LAYOUT] < 0))
+			snprintf(m->ltsymbol, sizeof m->ltsymbol, "%c%c%d", sym1, sym2, n - m->nmaster);
+		else
+			snprintf(m->ltsymbol, sizeof m->ltsymbol, "%c%c%c", sym1, sym2, sym3);
+	}
+}
\ No newline at end of file
diff --git a/vanitygaps.h b/vanitygaps.h
new file mode 100644
index 0000000..0ace063
--- /dev/null
+++ b/vanitygaps.h
@@ -0,0 +1,36 @@
+/* Key binding functions */
+static void defaultgaps(const Arg *arg);
+static void incrgaps(const Arg *arg);
+static void incrigaps(const Arg *arg);
+static void incrogaps(const Arg *arg);
+static void incrohgaps(const Arg *arg);
+static void incrovgaps(const Arg *arg);
+static void incrihgaps(const Arg *arg);
+static void incrivgaps(const Arg *arg);
+static void togglegaps(const Arg *arg);
+/* Layouts */
+static void flextile(Monitor *m);
+/* Internals */
+static void getgaps(Monitor *m, int *oh, int *ov, int *ih, int *iv, unsigned int *nc, float *mf, float *sf);
+static void setgaps(int oh, int ov, int ih, int iv);
+static void setcfact(const Arg *arg);
+static void setflexsymbols(Monitor *m, unsigned int n);
+static void setflexlayout(const Arg *arg);
+static void rotatelayoutaxis(const Arg *arg);
+static void mirrorlayout(const Arg *arg);
+
+/* Settings */
+static int enablegaps = 1;
+
+/* Named flextile constants */
+#define LAYOUT 0
+#define MASTER 1
+#define STACK 2
+#define SPLIT_VERTICAL 1   // master stack vertical split
+#define SPLIT_HORIZONTAL 2 // master stack horizontal split
+#define SPLIT_CENTERED_V 3 // centered master vertical split
+#define SPLIT_CENTERED_H 4 // centered master horizontal split
+#define LEFT_TO_RIGHT 1    // clients are stacked horizontally
+#define TOP_TO_BOTTOM 2    // clients are stacked vertically
+#define MONOCLE 3          // clients are stacked in deck / monocle mode
+#define GRID 4             // clients are stacked in grid mode
