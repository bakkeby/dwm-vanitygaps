From 17e218521adffd6a9f740bfc2919611b49a0258a Mon Sep 17 00:00:00 2001
From: bakkeby <bakkeby@gmail.com>
Date: Tue, 28 May 2019 12:07:27 +0200
Subject: [PATCH] pertag patch, keeps layout, mwfact, nmaster and optionally barpos per tag

This patch essentially combines the pertag and pertag_without_bar patch making the use of
both configurable. This is aimed at dwm builds where the end user can flip a config setting
rather than having to apply hardcoded code patches.

Refer to https://dwm.suckless.org/patches/pertag/
---
 config.def.h |   2 +
 dwm.c        | 127 +++++++++++++++++++++++++++++++++++++++++++++++----
 2 files changed, 121 insertions(+), 8 deletions(-)

diff --git a/config.def.h b/config.def.h
index 1c0b587..423742f 100644
--- a/config.def.h
+++ b/config.def.h
@@ -5,6 +5,8 @@ static const unsigned int borderpx  = 1;        /* border pixel of windows */
 static const unsigned int snap      = 32;       /* snap pixel */
 static const int showbar            = 1;        /* 0 means no bar */
 static const int topbar             = 1;        /* 0 means bottom bar */
+static const int pertag             = 1;        /* 0 means global layout across all tags (default), 1 = layout per tag (pertag) */
+static const int pertagbar          = 1;        /* 0 means using pertag, but with the same barpos, 1 = normal pertag */
 static const char *fonts[]          = { "monospace:size=10" };
 static const char dmenufont[]       = "monospace:size=10";
 static const char col_gray1[]       = "#222222";
diff --git a/dwm.c b/dwm.c
index 4465af1..952f26e 100644
--- a/dwm.c
+++ b/dwm.c
@@ -111,6 +111,7 @@ typedef struct {
 	void (*arrange)(Monitor *);
 } Layout;
 
+typedef struct Pertag Pertag;
 struct Monitor {
 	char ltsymbol[16];
 	float mfact;
@@ -130,6 +131,7 @@ struct Monitor {
 	Monitor *next;
 	Window barwin;
 	const Layout *lt[2];
+	Pertag *pertag;
 };
 
 typedef struct {
@@ -271,6 +273,16 @@ static Window root, wmcheckwin;
 /* configuration, allows nested code to access above variables */
 #include "config.h"
 
+struct Pertag {
+	unsigned int curtag, prevtag; /* current and previous tag */
+	int nmasters[LENGTH(tags) + 1]; /* number of windows in master area */
+	float mfacts[LENGTH(tags) + 1]; /* mfacts per tag */
+	unsigned int sellts[LENGTH(tags) + 1]; /* selected layouts */
+	const Layout *ltidxs[LENGTH(tags) + 1][2]; /* matrix of tags and layouts indexes  */
+	Bool showbars[LENGTH(tags) + 1]; /* display bar for the current tag */
+	Client *prevzooms[LENGTH(tags) + 1]; /* store zoom information */
+};
+
 /* compile-time check if all tags fit into an unsigned int bit array. */
 struct NumTags { char limitexceeded[LENGTH(tags) > 31 ? -1 : 1]; };
 
@@ -631,6 +643,7 @@ Monitor *
 createmon(void)
 {
 	Monitor *m;
+	int i;
 
 	m = ecalloc(1, sizeof(Monitor));
 	m->tagset[0] = m->tagset[1] = 1;
@@ -641,6 +654,32 @@ createmon(void)
 	m->lt[0] = &layouts[0];
 	m->lt[1] = &layouts[1 % LENGTH(layouts)];
 	strncpy(m->ltsymbol, layouts[0].symbol, sizeof m->ltsymbol);
+
+	if (pertag) {
+		if (!(m->pertag = (Pertag *)calloc(1, sizeof(Pertag))))
+			die("fatal: could not malloc() %u bytes\n", sizeof(Pertag));
+		m->pertag->curtag = m->pertag->prevtag = 1;
+		for(i=0; i <= LENGTH(tags); i++) {
+			/* init nmaster */
+			m->pertag->nmasters[i] = m->nmaster;
+
+			/* init mfacts */
+			m->pertag->mfacts[i] = m->mfact;
+
+			/* init layouts */
+			m->pertag->ltidxs[i][0] = m->lt[0];
+			m->pertag->ltidxs[i][1] = m->lt[1];
+			m->pertag->sellts[i] = m->sellt;
+
+			if (pertagbar) {
+				/* init showbar */
+				m->pertag->showbars[i] = m->showbar;
+
+				/* swap focus and zoomswap*/
+				m->pertag->prevzooms[i] = NULL;
+			}
+		}
+	}
 	return m;
 }
 
@@ -966,7 +1005,10 @@ grabkeys(void)
 void
 incnmaster(const Arg *arg)
 {
-	selmon->nmaster = MAX(selmon->nmaster + arg->i, 0);
+	if (pertag)
+		selmon->nmaster = selmon->pertag->nmasters[selmon->pertag->curtag] = MAX(selmon->nmaster + arg->i, 0);
+	else
+		selmon->nmaster = MAX(selmon->nmaster + arg->i, 0);
 	arrange(selmon);
 }
 
@@ -1500,10 +1542,23 @@ setfullscreen(Client *c, int fullscreen)
 void
 setlayout(const Arg *arg)
 {
-	if (!arg || !arg->v || arg->v != selmon->lt[selmon->sellt])
-		selmon->sellt ^= 1;
-	if (arg && arg->v)
-		selmon->lt[selmon->sellt] = (Layout *)arg->v;
+	if (!arg || !arg->v || arg->v != selmon->lt[selmon->sellt]) {
+		if (pertag) {
+			selmon->pertag->sellts[selmon->pertag->curtag] ^= 1;
+			selmon->sellt = selmon->pertag->sellts[selmon->pertag->curtag];
+		} else {
+			selmon->sellt ^= 1;
+		}
+	}
+	if (pertag) {
+		if (arg && arg->v)
+			selmon->pertag->ltidxs[selmon->pertag->curtag][selmon->sellt] = (Layout *)arg->v;
+		selmon->lt[selmon->sellt] = selmon->pertag->ltidxs[selmon->pertag->curtag][selmon->sellt];
+	} else {
+		if (arg && arg->v)
+			selmon->lt[selmon->sellt] = (Layout *)arg->v;
+	}
+
 	strncpy(selmon->ltsymbol, selmon->lt[selmon->sellt]->symbol, sizeof selmon->ltsymbol);
 	if (selmon->sel)
 		arrange(selmon);
@@ -1522,7 +1577,10 @@ setmfact(const Arg *arg)
 	f = arg->f < 1.0 ? arg->f + selmon->mfact : arg->f - 1.0;
 	if (f < 0.1 || f > 0.9)
 		return;
-	selmon->mfact = f;
+	if (pertag)
+		selmon->mfact = selmon->pertag->mfacts[selmon->pertag->curtag] = f;
+	else
+		selmon->mfact = f;
 	arrange(selmon);
 }
 
@@ -1699,7 +1757,10 @@ tile(Monitor *m)
 void
 togglebar(const Arg *arg)
 {
-	selmon->showbar = !selmon->showbar;
+	if (pertag && pertagbar)
+		selmon->showbar = selmon->pertag->showbars[selmon->pertag->curtag] = !selmon->showbar;
+	else
+		selmon->showbar = !selmon->showbar;
 	updatebarpos(selmon);
 	XMoveResizeWindow(dpy, selmon->barwin, selmon->wx, selmon->by, selmon->ww, bh);
 	arrange(selmon);
@@ -1738,9 +1799,33 @@ void
 toggleview(const Arg *arg)
 {
 	unsigned int newtagset = selmon->tagset[selmon->seltags] ^ (arg->ui & TAGMASK);
+	int i;
 
 	if (newtagset) {
 		selmon->tagset[selmon->seltags] = newtagset;
+
+		if (pertag) {
+			if (newtagset == ~0) {
+				selmon->pertag->prevtag = selmon->pertag->curtag;
+				selmon->pertag->curtag = 0;
+			}
+			/* test if the user did not select the same tag */
+			if (!(newtagset & 1 << (selmon->pertag->curtag - 1))) {
+				selmon->pertag->prevtag = selmon->pertag->curtag;
+				for (i=0; !(newtagset & 1 << i); i++) ;
+				selmon->pertag->curtag = i + 1;
+			}
+
+			/* apply settings for this view */
+			selmon->nmaster = selmon->pertag->nmasters[selmon->pertag->curtag];
+			selmon->mfact = selmon->pertag->mfacts[selmon->pertag->curtag];
+			selmon->sellt = selmon->pertag->sellts[selmon->pertag->curtag];
+			selmon->lt[selmon->sellt] = selmon->pertag->ltidxs[selmon->pertag->curtag][selmon->sellt];
+			selmon->lt[selmon->sellt^1] = selmon->pertag->ltidxs[selmon->pertag->curtag][selmon->sellt^1];
+			if (pertagbar && selmon->showbar != selmon->pertag->showbars[selmon->pertag->curtag])
+				togglebar(NULL);
+		}
+
 		focus(NULL);
 		arrange(selmon);
 	}
@@ -2035,10 +2120,36 @@ updatewmhints(Client *c)
 void
 view(const Arg *arg)
 {
+	int i;
+	unsigned int tmptag;
+
 	if ((arg->ui & TAGMASK) == selmon->tagset[selmon->seltags])
 		return;
 	selmon->seltags ^= 1; /* toggle sel tagset */
-	if (arg->ui & TAGMASK)
+
+	if (pertag) {
+		if (arg->ui & TAGMASK) {
+			selmon->pertag->prevtag = selmon->pertag->curtag;
+			selmon->tagset[selmon->seltags] = arg->ui & TAGMASK;
+			if (arg->ui == ~0)
+				selmon->pertag->curtag = 0;
+			else {
+				for (i=0; !(arg->ui & 1 << i); i++) ;
+				selmon->pertag->curtag = i + 1;
+			}
+		} else {
+			tmptag = selmon->pertag->prevtag;
+			selmon->pertag->prevtag = selmon->pertag->curtag;
+			selmon->pertag->curtag = tmptag;
+		}
+		selmon->nmaster = selmon->pertag->nmasters[selmon->pertag->curtag];
+		selmon->mfact = selmon->pertag->mfacts[selmon->pertag->curtag];
+		selmon->sellt = selmon->pertag->sellts[selmon->pertag->curtag];
+		selmon->lt[selmon->sellt] = selmon->pertag->ltidxs[selmon->pertag->curtag][selmon->sellt];
+		selmon->lt[selmon->sellt^1] = selmon->pertag->ltidxs[selmon->pertag->curtag][selmon->sellt^1];
+		if (pertagbar && selmon->showbar != selmon->pertag->showbars[selmon->pertag->curtag])
+			togglebar(NULL);
+	} else if (arg->ui & TAGMASK)
 		selmon->tagset[selmon->seltags] = arg->ui & TAGMASK;
 	focus(NULL);
 	arrange(selmon);
-- 
2.17.1

